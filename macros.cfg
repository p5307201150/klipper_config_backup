#####################################################################
#  Macros
#####################################################################

[gcode_macro PRINT_START]
gcode:
  BED_MESH_CLEAR
  {% set BED_TEMP = params.BED_TEMP | default(110) | float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP | default(250) | float %}
  {% set EXTRUDER_TEMP_INITIAL = EXTRUDER_TEMP - 250.0 %}
  {% set CHAMBER_TEMP = params.CHAMBER_TEMP | default(50) | float %}
  {% set NOZZLE_SIZE = params.NOZZLE_SIZE | default(0.40) | float %}
  M106 S0                           ; turn off part cooling fan
  M140 S{BED_TEMP}                  ; set bed final temp
  M104 S{EXTRUDER_TEMP_INITIAL}     ; set extruder initial temp
  M190 S{BED_TEMP}                  ; wait for bed final temp
  M109 S{EXTRUDER_TEMP}             ; wait for extruder final temp
  M106 S0
  G28
  CLEAN
  G28
  QUAD_GANTRY_LEVEL
  G28 Z
  #G90 													 											; absolute positioning
  #G0 Z20																							; hop up to prevent knocking probe off after homing Z
  #G0 X150 Y150 F19500					; move to center of bed to prevent knocking probe off after homing Z (otherwise QGL just moves our Z hop down again before traveling)
  BED_MESH_CALIBRATE
  G28 Z																								; home z again
  G0 Z20																				; change PA based on bed temp
  CALIBRATE_Z
  G92 E0                              																; reset Extruder
  PURGE_LINE NOZZLE_SIZE={NOZZLE_SIZE}


#[gcode_macro PRINT_START]
#gcode:
#  BED_MESH_CLEAR
#  {% set BED_TEMP = params.BED_TEMP | default(110) | float %}
#  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP | default(250) | float %}
#  {% set EXTRUDER_TEMP_INITIAL = EXTRUDER_TEMP - 215.0 %}
#  {% set CHAMBER_TEMP = params.CHAMBER_TEMP | default(50) | float %}
#  {% set NOZZLE_SIZE = params.NOZZLE_SIZE | default(0.40) | float %}
#  M106 S0                           ; turn off part cooling fan
#  M140 S{BED_TEMP}                  ; set bed final temp
#  M104 S{EXTRUDER_TEMP_INITIAL}     ; set extruder initial temp
#  M190 S{BED_TEMP}                  ; wait for bed final temp
#  M109 S{EXTRUDER_TEMP}             ; wait for extruder final temp
#  G21                               ; set units to millimeters
#  G90                               ; use absolute coordinates
#  M83                               ; use relative distances
#  G32                               ; level and clean
#  CALIBRATE_Z
  #BED_MESH_CALIBRATE
#  G92 E0
#  PURGE_LINE NOZZLE_SIZE={NOZZLE_SIZE}

[gcode_macro PRINT_END]
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-20.0 F3600                ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F10000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
	G1 Z2 F3000 
	G90
    PARK
	BED_MESH_CLEAR

[gcode_macro STOP_PRINT]
gcode:
    CANCEL_PRINT
    COOLDOWN
    PARK

[gcode_macro G32]
gcode:
  BED_MESH_CLEAR
  {% if "z" not in printer.toolhead.homed_axes %} ; G28 Home if needed
  G28
  {% endif %}
  CLEAN
  G28 Z
  QUAD_GANTRY_LEVEL                               ; Level Gantry

[gcode_macro PARK]
gcode:
    {% set x_park = (printer.toolhead.axis_maximum.x|float)/2 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F10000

[gcode_macro CONVECTION_START]
gcode:
    {% if "z" not in printer.toolhead.homed_axes %} ; G28 Home if needed
    G28
    {% endif %}
    G1 Z10        ;lower z
    M140 S110     ;set bed temp
    #M104 S250     ;set hotend temp
    M106 S255     ;set fan on
    BedFansSlow
    CENTER
    

[gcode_macro CLEAN]
gcode:
    clean_nozzle
    PARK

[gcode_macro SETUP_Z_ACCEPT_SAVE]
gcode:
    ACCEPT
    SAVE_CONFIG

[gcode_macro QGL]
gcode:
    G28
    QUAD_GANTRY_LEVEL
    G28
    HOME

[gcode_macro TEST_PROBE]
gcode:
    QGL
    PROBE_ACCURACY

[gcode_macro RAISE]
gcode:
    G28
    G90
    G0 X150 Y0 Z225 F20000

[gcode_macro HOME]
gcode:
    G28
    G90
    G0 X150 Y150 Z30 F20000

[gcode_macro CENTER]
gcode:
    {% if "z" not in printer.toolhead.homed_axes %}
    HOME                                         ; Only G28 Home if needed
    {% endif %}
    G0 X150 Y150 Z30 F20000
 
[gcode_macro PURGE_LINE]
gcode:
  {% set NOZZLE_SIZE = params.NOZZLE_SIZE | default(0.40) | float %}
  SAVE_GCODE_STATE NAME=BEFORE_PRIME
  M117 Prime Line
  {% if "z" not in printer.toolhead.homed_axes %}
    G28                                         ; Only G28 Home if needed
  {% endif %}
  G0 X115 Y5 Z{NOZZLE_SIZE|float*0.75} F18000   ; Move to start position
  G92 E0                                        ; Reset Extruder
  G1 E{NOZZLE_SIZE|float*0.75*3.14*11} F600     ; Extrude a little
  G1 X5 E{NOZZLE_SIZE|float*0.75*3.14*22} F1000 ; Draw line
  G92 E0                                        ; Reset Extruder
  G91                                           ; relative positioning
  G0 X50 F18000                                 ; Wipe line 1
  G0 X40 F18000                                 ; Wipe line 2
  G0 Z10 F1000                                  ; Raise nozzle
  G90                                           ; use absolute coordinates
  RESTORE_GCODE_STATE NAME=BEFORE_PRIME


[gcode_macro _CASELIGHT_ON]
description: Helper: Light on
gcode:
  SET_PIN PIN=caselight VALUE={printer['gcode_macro _USER_VARIABLE'].caselight_on}
  {action_respond_info("Caselight on")}
    
[gcode_macro _CASELIGHT_OFF]
description: Helper: Light off
gcode:
  SET_PIN PIN=caselight VALUE=0.0
  {action_respond_info("Caselight off")}

[gcode_macro CASELIGHT]
description: Toggle light
gcode:
  {%if printer['output_pin caselight'].value == 0 %}
    _CASELIGHT_ON
  {% else %}
    _CASELIGHT_OFF
  {% endif %}

[gcode_macro BUZZ_X]
gcode:
  STEPPER_BUZZ STEPPER=stepper_x

[gcode_macro BUZZ_Y]
gcode:
  STEPPER_BUZZ STEPPER=stepper_y

[gcode_macro BUZZ_E]
gcode:
  STEPPER_BUZZ STEPPER=extruder

[gcode_macro BUZZ_Z]
gcode:
  STEPPER_BUZZ STEPPER=stepper_z

[gcode_macro BUZZ_Z1]
gcode:
  STEPPER_BUZZ STEPPER=stepper_z1

[gcode_macro BUZZ_Z2]
gcode:
  STEPPER_BUZZ STEPPER=stepper_z2

[gcode_macro BUZZ_Z3]
gcode:
  STEPPER_BUZZ STEPPER=stepper_z3

[gcode_macro SETUP_Z]
gcode:
  BED_MESH_CLEAR
  M106 S0                           ; turn off part cooling fan
  M140 S110
  M104 S250
  M190 S110
  M109 S250
  G28
  CLEAN
  G28
  QUAD_GANTRY_LEVEL
  G28
  G90
  G1 X150 Y150 Z10
  Z_ENDSTOP_CALIBRATE

[gcode_macro SETUP_Z_DOWN_1]
gcode:
   TESTZ Z=-1

[gcode_macro SETUP_Z_UP_1]
gcode:
   TESTZ Z=1

[gcode_macro SETUP_Z_DOWN_01]
gcode:
   TESTZ Z=-.1

[gcode_macro SETUP_Z_UP_01]
gcode:
   TESTZ Z=.1

[gcode_macro SETUP_Z_DOWN_001]
gcode:
   TESTZ Z=-.01

[gcode_macro SETUP_Z_UP_001]
gcode:
   TESTZ Z=.01

[gcode_macro SETUP_Z_GET_POSITION]
gcode:
   GET_POSITION

[gcode_macro CHECK_ALL_MOTORS]
gcode:
  STEPPER_BUZZ STEPPER=stepper_x
  STEPPER_BUZZ STEPPER=stepper_y
  STEPPER_BUZZ STEPPER=stepper_z
  STEPPER_BUZZ STEPPER=stepper_z1
  STEPPER_BUZZ STEPPER=stepper_z2
  STEPPER_BUZZ STEPPER=stepper_z3
  STEPPER_BUZZ STEPPER=extruder

[gcode_shell_command backup_cfg]
command: sh <path to your shell script>
timeout: 30.
verbose: True

[gcode_macro BACKUP_CFG]
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(20)|int %}
	
	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		# Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		# Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home XY and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED

######################### PARKING #########################
## https://github.com/AndrewEllis93/v2.247_backup_klipper_config/blob/master/macros.cfg

# Park front center
[gcode_macro PARKFRONT]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F19500		
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
# Park front center, but low down
[gcode_macro PARKFRONTLOW]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F19500										
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
# Park top rear left
[gcode_macro PARKREAR]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKREAR
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F19500		
	RESTORE_GCODE_STATE NAME=PARKREAR

# Park center of build volume
[gcode_macro PARKCENTER]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F19500	
	RESTORE_GCODE_STATE NAME=PARKCENTER
	
# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKBED
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F19500										
	RESTORE_GCODE_STATE NAME=PARKBED
	
######################### FILAMENT #########################

[gcode_macro UNLOAD_FILAMENT]
gcode:
	SAVE_GCODE_STATE NAME=UNLOADFILAMENT
	M83                                   ; set extruder to relative
	G1 E10 F600                           ; extrude a little to soften tip 
	G1 E-100 F1800                        ; retract filament completely
	RESTORE_GCODE_STATE NAME=UNLOADFILAMENT

[gcode_macro LOAD_FILAMENT]
gcode:
	SAVE_GCODE_STATE NAME=LOADFILAMENT
	M83 ; set extruder to relative
	G1 E90 F600
	RESTORE_GCODE_STATE NAME=LOADFILAMENT
   
[gcode_macro HOT_UNLOAD]
gcode:
	# Parameters
	{% set t = params.T|default(240)|int %}
	
	M104 S{t}
	PARKFRONT
	M109 S{t}
    UNLOAD_FILAMENT
	
[gcode_macro HOT_LOAD]
gcode:
	# Parameters
	{% set t = params.T|default(240)|int %}
	
	M104 S{t}
	PARKFRONT
	M109 S{t}
    LOAD_FILAMENT


######################### SAFETY #########################

# Lower z stepper current (in case of crash). Referenced in my klicky homing overrides and in calibrate_z.
[gcode_macro LOWERCURRENT]
gcode:
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT=0.35 HOLDCURRENT=0.35
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT=0.35 HOLDCURRENT=0.35
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT=0.35 HOLDCURRENT=0.35
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT=0.35 HOLDCURRENT=0.35
	
# Returns z steppers back to their currents specified in the config.
[gcode_macro RESETCURRENT]
gcode:
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer.configfile.settings["tmc2209 stepper_z"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z"].hold_current}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer.configfile.settings["tmc2209 stepper_z1"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z1"].hold_current}
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={printer.configfile.settings["tmc2209 stepper_z2"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z2"].hold_current}
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={printer.configfile.settings["tmc2209 stepper_z3"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z3"].hold_current}	
	
######################### FLUIDD WEB MACROS #########################
